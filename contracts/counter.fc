#include "imports/stdlib.fc";

int equal_slices (slice a, slice b) asm "SDEQ";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    ;; if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    ;;     return ();
    ;; }

    ;; int n = in_msg_body~load_uint(32);

    ;; slice ds = get_data().begin_parse();
    ;; int total = ds~load_uint(64);

    ;; total += n;

    ;; set_data(begin_cell().store_uint(total, 64).end_cell());

    slice sender_address = parse_sender_address(in_msg_full);
    slice owner_address = load_data();

    if ~ equal_slices(sender_address, owner_address) {
        cell msg_body_cell = begin_cell().store_slice(in_msg_body).end_cell();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_grams(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_slice(sender_address)
            .store_ref(msg_body_cell)
        .end_cell();

        send_raw_message(msg, 64);
    }
}

slice load_data() inline {
    var ds = get_data().begin_parse();
    return ds~load_msg_addr();
}

int get_total() method_id {
    slice ds = get_data().begin_parse();
    int total = ds~load_uint(64);

    return total;
}

slice parse_sender_address (cell in_msg_full) inline {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}